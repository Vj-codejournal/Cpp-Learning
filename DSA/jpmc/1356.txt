int countPrimes(int n) {
        int cnt = 0;
        vector<bool>  prime(n+1,true);
        prime[0] = prime[1] = false;

        for(int i = 2;i<n;i++){
            if(prime[i]){
                cnt++;

                for(int j = 2*i;j<n;j = j+i){
                    prime[j] = false;
                }
            }
        }
        return cnt;
    }


#include <iostream>

using namespace std;
int ternarySearch( int *arr, int size,int key,int comparision) {
    int low = 0;
    int high = size;

    while (low <= high) {
        int mid1 = low + (high - low) / 3;
        int mid2 = high - (high - low) / 3;

        if (arr[mid1] == key) {
            comparision++;
            return comparision;  
        }
        comparision++;
        if (arr[mid2] == key) {
            comparision++;
            return comparision;  
        }
        comparision++;
        if (key < arr[mid1]) {
            comparision++;
            high = mid1 - 1;
        } else if (key > arr[mid2]) {
            comparision+= 2;
            low = mid2 + 1;
        } else {
            comparision+=2;
            low = mid1 + 1;
            high = mid2 - 1;
        }
    }

    return comparision;  
}

#include<iostream>

using namespace std;

class node{
    public:
    int data;
    node* left;
    node* right;

    node(int d){
        this->data = d;
        this-> left = NULL;
        this->right = NULL;

    }
};

node* buildTree(node *root){
    //cout << "Enter the data:" << endl;
    int data;
    cin >> data;
    root = new node(data);


    if (data == -1){
    return NULL;
    }
    //cout<<"Enter data for inserting in left of "<<data<<endl;
    root->left = buildTree(root->left);
    //cout<<"Enter data for inserting in right of "<<data<<endl;

    root->right = buildTree(root->right);
    return root;

}
int height(node* root){
    if(root == NULL){
        return 0;

    }
    int left = height(root->left);
    int right=height(root->right) ;

    int ans = max(left,right) + 1;
    return ans;

}

int noOfNodes(node* root){
    if(root==NULL){
        return 0;
    }
    int left = noOfNodes(root->left);

    int  right = noOfNodes(root->right);

    int ans =  left+right+1;

    return ans;
}

int main(){

    node* root = NULL;

    root = buildTree(root);

    cout<<"Height of tree- "<<height(root)<<endl;

    cout<<"No of Nodes -"<<noOfNodes(root);

}


#include <bits/stdc++.h>

 
using namespace std;
void merge(int *arr,int s,int e){
    int mid =(s+e)/2;
    //split to 2 array
    int len1 = mid - s+1;
    int len2 = e-mid;
    int *first = new int(len1);
    int *second = new int(len2);
    
    int k =s;
    for(int i = 0;i<len1;i++){
        first[i] = arr[k++];
    }
    k = mid+1;
    for(int i = 0;i<len2;i++){
        second[i] = arr[k++];
    }

    
    int index1=0;
    int index2=0;
    k = s;
    while(index1<len1 && index2<len2){
        if(first[index1]<second[index2]){
            arr[k++] =  first[index1++];
        }
        else{
            arr[k++] =  second[index2++];
        }
    }
    while(index1<len1){
        arr[k++] =  first[index1++];
    }
    while(index2<len2){
        arr[k++] =  second[index2++];
    }

    delete [] first;
    delete [] second;
}
void MergeSort(int *arr,int s,int e){
    
    if(s>=e){
        return;
    }

    int mid = (s+e)/2;
    
    MergeSort(arr,s,mid);

    
    MergeSort(arr,mid+1,e);

    merge(arr,s,e);

}
int main(){
    int n;
    cin>>n;
    int arr[n];

    for(int i = 0;i<n;i++){
        cin>>arr[i];
    }
    MergeSort(arr,0 ,n-1);
    for(auto it : arr)
        cout<<it<<" ";

        
    return 0;
}



#include <bits/stdc++.h>
using namespace std;

int merge(int a[], int q, int r, int link[])
{
    int i = q, j = r, k = 0;

    while (i && j)
    {
        if (a[i] < a[j])
        {
            link[k] = i;
            k = i;
            i = link[i];
        }
        else
        {
            link[k] = j;
            k = j;
            j = link[j];
        }
    }
    if (!i)
    {
        link[k] = j;
    }
    else
    {
        link[k] = i;
    }
    return (link[0]);
}

int mergeS(int a[], int s, int e, int link[])
{
    if (s >= e)
    {
        return s;
    }
    int m = s + (e - s) / 2;

    int q = mergeS(a, s, m, link);

    int r = mergeS(a, m + 1, e, link);

    return merge(a, q, r, link);
}

int main()
{
    int a[5] = {-1, 5, 3, 9, 7};
    int link[5] = {0, 0, 0, 0, 0};

    int l = mergeS(a, 1, 4, link);

    int k = 0;
    cout<<"Array after sorting is : ";
    for (int i = 1; i < 5; i++)
    {
        cout << a[link[k]] << " ";
        k = link[k];
    }
}




#include <iostream>
#include <vector>
#include <algorithm>
#include <ctime>

// Function to partition the array and return the index of the pivot
int partition(std::vector<int>& arr, int low, int high) {
    int pivot = arr[low + rand() % (high - low + 1)]; // Choose a random pivot
    int i = low - 1;
    int j = high + 1;

    while (true) {
        do {
            i++;
        } while (arr[i] < pivot);

        do {
            j--;
        } while (arr[j] > pivot);

        if (i >= j) {
            return j; // Return the index of the pivot
        }

        std::swap(arr[i], arr[j]);
    }
}

// Function to perform Quick Sort
void quick_sort(std::vector<int>& arr, int low, int high) {
    if (low < high) {
        int pivotIndex = partition(arr, low, high);

        // Recursively sort the sub-arrays
        quick_sort(arr, low, pivotIndex);
        quick_sort(arr, pivotIndex + 1, high);
    }
}

int main() {
    // Example usage:
    std::vector<int> input_vector = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};
    
    // Seed for random number generation
    srand(static_cast<unsigned>(time(0)));

    // Perform Quick Sort
    quick_sort(input_vector, 0, input_vector.size() - 1);

    // Print the sorted array
    std::cout << "Sorted array: ";
    for (int num : input_vector) {
        std::cout << num << " ";
    }

    return 0;
}



##############################################################

#include <bits/stdc++.h>
using namespace std;

void insertion_sort(int arr[], int low, int n)
{

    for (int i = low + 1; i < n + 1; i++)
    {
        int val = arr[i];
        int j = i;
        while (j > low && arr[j - 1] > val)
        {
            arr[j] = arr[j - 1];
            j -= 1;
        }
        arr[j] = val;
    }
}

int partition(int arr[], int low, int high)
{
    int pivot = arr[high];
    int i, j;
    i = low;
    j = low;

    for (int i = low; i < high; i++)
    {
        if (arr[i] < pivot)
        {
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            j += 1;
        }
    }

    int temp = arr[j];
    arr[j] = arr[high];
    arr[high] = temp;

    return j;
}

void quick_sort(int arr[], int low, int high)
{
    if (low < high)
    {
        int pivot = partition(arr, low, high);
        quick_sort(arr, low, pivot - 1);
        quick_sort(arr, pivot + 1, high);
    }
}

void hybrid_quick_sort(int arr[], int low, int high)
{
    while (low < high)
    {
        if (high <=  4)
        {
            insertion_sort(arr, low, high);
            break;
        }

        else

        {
            int pivot = partition(arr, low, high);

            if (pivot - low < high - pivot)
            {
                hybrid_quick_sort(arr, low, pivot - 1);
                low = pivot + 1;
            }
            else
            {
                hybrid_quick_sort(arr, pivot + 1, high);
                high = pivot - 1;
            }
        }
    }
}

int main()
{
    int n;
    cout << "Enter the array size : ";
    cin >> n;

    int arr[n];
    cout << "Enter the array elements : ";
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }

    hybrid_quick_sort(arr, 0, n - 1);

    cout << "The sorted array is : ";
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
    return 0;
}



#include <iostream>
#include <vector>

int medianOfThree(std::vector<int>& arr, int left, int right) {
    int mid = left + (right - left) / 2;
    if (arr[right] < arr[left])
        std::swap(arr[left], arr[right]);
    if (arr[mid] < arr[left])
        std::swap(arr[left], arr[mid]);
    if (arr[right] < arr[mid])
        std::swap(arr[mid], arr[right]);
    return mid;
}

int partition(std::vector<int>& arr, int left, int right) {
    int pivotIndex = medianOfThree(arr, left, right);
    int pivotValue = arr[pivotIndex];
    std::swap(arr[pivotIndex], arr[right]);
    int storeIndex = left;
    for (int i = left; i < right; ++i) {
        if (arr[i] < pivotValue) {
            std::swap(arr[i], arr[storeIndex]);
            storeIndex++;
        }
    }
    std::swap(arr[storeIndex], arr[right]);
    return storeIndex;
}

void quickSort(std::vector<int>& arr, int left, int right) {
    if (left < right) {
        int pivotIndex = partition(arr, left, right);
        quickSort(arr, left, pivotIndex - 1);
        quickSort(arr, pivotIndex + 1, right);
    }
}

int main() {
    std::vector<int> arr = {12, 4, 5, 6, 7, 3, 1, 15, 8, 10};
    
    quickSort(arr, 0, arr.size() - 1);

    std::cout << "Sorted array: ";
    for (int num : arr) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}

###################################################3


// quick sort for n>4 and insertion sort for n<4
#include <iostream>
#include <vector>
#include <math.h>
using namespace std;
void insertion_sort(vector<int> &v, int low, int high)
{
    int i;
    int j = low + 1;
    while (j <= high)
    {int k=v[j];
    i=j-1;
        while (i>=low && v[i] > k)
        {
            v[i+1]=v[i];
            i--;
        }
        v[i+1]=k;
        j++;
    }
}
int partition(vector<int> &v, int low, int high)
{
    int pivot = v[low];
    int i = low;
    int j = high;
    while (j > i)
    {
        while (i<=high && v[i] <= pivot)
        {
            i++;
        }
        while (j>=low && v[j] >pivot)
        {
            j--;
        }if(i<j)
        swap(v[i], v[j]);
    }
    swap(pivot, v[j]);
    return j;
}

void quick_sort(vector<int> &v, int low, int high)
{
    if ((high - low + 1) <= 4)
        insertion_sort(v, low, high);
    int pi = partition(v, low, high);
    quick_sort(v, low, pi - 1);
    quick_sort(v, pi + 1, high);
}
int main()
{
    vector<int> v = {1, 5, 8, 2, 10, 4, 7, 6};
    quick_sort(v, 0, 7);
    for (int i = 0; i < 8; i++)
    {
        cout << v[i] << " ";
    }
    return 0;
}



