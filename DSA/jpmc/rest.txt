#include<bits/stdc++.h>
using namespace std;

int binomial(int n, int k) {
    if (k == 0 || k == n)
        return 1;
    return binomial(n - 1, k - 1) + binomial(n - 1, k);
}

int catalan(int n) {
    return binomial(2 * n, n) / (n + 1);
}

//Cn = 1/(n+1)(2nCn)
//nCr = n-1Cr-1 + n-1Cr

int main() {
    int n;
    cout << "Enter the value of n: ";
    cin >> n;
    cout << "The nth Catalan number is: " << catalan(n);
    return 0;
}

##############################################################

#include<bits/stdc++.h>

using namespace std;
class Solution{
    public:
    vector<int> bellman_ford(int V,vector<vector<int>>& edges,int S){
        vector<int> dist(V,1e8);
        dist[S] = 0;
        for(int i = 0;i<V-1;i++){
            for(auto it : edges){
                int u = it[0];
                int v = it[1];
                int wt = it[2];
                if(dist[u] != 1e8 && dist[u] + wt < dist[v]){
                    dist[v] = dist[u] + wt;
                }
            }
        }

        //for negative cycle
        //check for Nth time should not reduce if no negative cycle
        for(auto it : edges){
                int u = it[0];
                int v = it[1];
                int wt = it[2];
                if(dist[u] != 1e8 && dist[u] + wt < dist[v]){
                    return {-1};
                }
            }
        return dist;
    }
};
//TC - V*E more than dijkstra

#########################################################

#include <bits/stdc++.h>

using namespace std;
class Solution{
    public:
    void shortest_distance(vector<vector<int>>&matrix){
        int n = matrix.size();
        for(int i = 0;i<n;i++){
            for(int j = 0;j<n;j++){
                if(matrix[i][j] == -1){
                    matrix[i][j] = 1e9;
                }
                if(i == j){
                    matrix[i][j] = 0;
                }
            }
        }

        for(int k = 0;k<n;k++){//as have to do via each node
            for(int i = 0;i<n;i++){
                for(int j = 0;j<n;j++){
                    matrix[i][j] = min(matrix[i][j],matrix[i][k]+matrix[k][j]);
                }
            }
        }
        //negative cycle
        for(int i = 0;i<n;i++){
            if(matrix[i][i]<0){
                cout<<"Negative cycle";
                return;
            }
        }

        //as all unreachable nodes are -1
        for(int i = 0;i<n;i++){
            for(int j = 0;j<n;j++){
                if(matrix[i][j] == 1e9){
                    matrix[i][j] = -1;
                }
                
            }
        }
    }
};
//TC - O(N^3)
// SC - O(N^2)
int main(){
    
    return 0;
}

//dijkstra not work on negative cycle but can do dijkstra on every node take v x e x log v if no negative cycle


#################################################################

Ques1 Write a program that efficiently merges a set of sorted files of different lengths into a single sorted file, aiming to minimize the time complexity of the process.

#include <bits/stdc++.h>
using namespace std;
int minComputation(int size, int files[])
{
	priority_queue<int, vector<int>, greater<int> > pq;
	for (int i = 0; i < size; i++) {
		pq.push(files[i]);
	}
	int count = 0;
	while (pq.size() > 1) {
		int first_smallest = pq.top();
		pq.pop();
		int second_smallest = pq.top();
		pq.pop();
		int temp = first_smallest + second_smallest;
		count += temp;
		pq.push(temp);
	}
	return count;
}
int main()
{
	int n = 6;
	int files[] = { 2, 3, 4, 5, 6, 7 };
cout << "Minimum Computations = "<< minComputation(n, files);
	return 0;
}

Ques2 WAP to implement Huffman coding. The program should encode a given input text using Huffman's algorithm, generating corresponding codes for each character. It should also decode Huffman-encoded text back to its original form, efficiently handling variable-length encoding and decoding
#include <bits/stdc++.h> 
using namespace std; 
struct MinHeapNode { 
	char data; 
	unsigned freq; 
	MinHeapNode *left, *right; 
	MinHeapNode(char data, unsigned freq) 
	{ 
		left = right = NULL; 
		this->data = data; 
		this->freq = freq; 
	} 
}; 
struct compare { 
	bool operator()(MinHeapNode* l, MinHeapNode* r) 
	{ 
		return (l->freq > r->freq); 
	} 
}; 
void printCodes(struct MinHeapNode* root, string str) 
{ 
	if (!root)   return; 
	if (root->data != '$')   cout << root->data << ": " << str << "\n"; 
	printCodes(root->left, str + "0"); 
	printCodes(root->right, str + "1"); 
} 
void HuffmanCodes(char data[], int freq[], int size) 
{ 
	struct MinHeapNode *left, *right, *top;  
	priority_queue<MinHeapNode*, vector<MinHeapNode*>, compare> minHeap; 
for (int i = 0; i < size; ++i)    minHeap.push(new MinHeapNode(data[i], freq[i])); 
	while (minHeap.size() != 1) { 
		left = minHeap.top(); 
		minHeap.pop(); 
		right = minHeap.top(); 
		minHeap.pop();  
		top = new MinHeapNode('$', left->freq + right->freq); 
		top->left = left; 
		top->right = right; 
		minHeap.push(top); 
	}  
	printCodes(minHeap.top(), ""); 
} 
int main() 
{ 
	char arr[] = { 'a', 'b', 'c', 'd', 'e', 'f' }; 
	int freq[] = { 5, 9, 12, 13, 16, 45 }; 
	int size = sizeof(arr) / sizeof(arr[0]); 
	HuffmanCodes(arr, freq, size); 
	return 0; 
} 


#######################################################

Ques1  Write a program to implement Change – making problem using a dynamic programig when (1) the cashier has only a limited number of coins. (2) the cashier has an unlimited supply of coins. The value of coins will be like (1,5,10,20,50…paise)

Case 1: Limited Number of Coins
#include <iostream>
#include <vector>
#include <climits>
using namespace std;
int minCoinsLimited(const vector<int>& coins, int amount, const vector<int>& counts) {
    vector<int> dp(amount + 1, INT_MAX);
    dp[0] = 0;
    for (int i = 1; i <= amount; ++i) {
        for (int j = 0; j < coins.size(); ++j) {
            if (i >= coins[j] && counts[j] > 0) {
                int remaining = i - coins[j];
                if (dp[remaining] != INT_MAX && dp[remaining] + 1 < dp[i]) {
                    dp[i] = dp[remaining] + 1;
                }
            }
        }
    }
    return dp[amount] == INT_MAX ? -1 : dp[amount];
}
int main() {
    vector<int> coins = {1, 5, 10, 20, 50}; // Denominations of coins
    vector<int> counts = {2, 3, 1, 2, 0};    // Number of coins available for each denomination
    int amount = 75; // Amount for which change is needed
    int minCoins = minCoinsLimited(coins, amount, counts);
    if (minCoins != -1) {
        cout << "Minimum number of coins required: " << minCoins << endl;
    } else {
        cout << "It is not possible to make the exact change." << endl;
    }
    return 0;
}
Output:



Case 2: Unlimited Supply of Coins
#include <iostream>
#include <vector>
#include <climits>
using namespace std;
int minCoinsUnlimited(const vector<int>& coins, int amount) {
    vector<int> dp(amount + 1, INT_MAX);
    dp[0] = 0;
    for (int i = 1; i <= amount; ++i) {
        for (int j = 0; j < coins.size(); ++j) {
            if (i >= coins[j] && dp[i - coins[j]] != INT_MAX && dp[i - coins[j]] + 1 < dp[i]) {
                dp[i] = dp[i - coins[j]] + 1;
            }										Output:
        }
    }
    return dp[amount] == INT_MAX ? -1 : dp[amount];
}
int main() {
    vector<int> coins = {1, 5, 10, 20, 50}; // Denominations of coins
    int amount = 75; // Amount for which change is needed
    int minCoins = minCoinsUnlimited(coins, amount);
    if (minCoins != -1) {
        cout << "Minimum number of coins required: " << minCoins << endl;
    } else {
        cout << "It is not possible to make the exact change." << endl;
    }
    return 0;
}


##########################################################################


// CPP program to find shortest distance 
// in a multistage graph. 
#include<bits/stdc++.h> 
using namespace std; 

#define N 8 
#define INF INT_MAX 

// Returns shortest distance from 0 to 
// N-1. 
int shortestDist(int graph[N][N]) { 

	// dist[i] is going to store shortest 
	// distance from node i to node N-1. 
	int dist[N]; 

	dist[N-1] = 0; 

	// Calculating shortest path for 
	// rest of the nodes 
	for (int i = N-2 ; i >= 0 ; i--) 
	{ 

		// Initialize distance from i to 
		// destination (N-1) 
		dist[i] = INF; 

		// Check all nodes of next stages 
		// to find shortest distance from 
		// i to N-1. 
		for (int j = i ; j < N ; j++) 
		{ 
			// Reject if no edge exists 
			if (graph[i][j] == INF) 
				continue; 

			// We apply equation to 
			// distance to target through j. 
			// and compare with minimum distance 
			// so far. 
			dist[i] = min(dist[i], graph[i][j] + 
										dist[j]); 
		} 
	} 

	return dist[0]; 
} 

// Driver code 
int main() 
{ 
	// Graph stored in the form of an 
	// adjacency Matrix 
	int graph[N][N] = 
	{{INF, 1, 2, 5, INF, INF, INF, INF}, 
	{INF, INF, INF, INF, 4, 11, INF, INF}, 
	{INF, INF, INF, INF, 9, 5, 16, INF}, 
	{INF, INF, INF, INF, INF, INF, 2, INF}, 
	{INF, INF, INF, INF, INF, INF, INF, 18}, 
	{INF, INF, INF, INF, INF, INF, INF, 13}, 
	{INF, INF, INF, INF, INF, INF, INF, 2}, 
	{INF, INF, INF, INF, INF, INF, INF, INF}}; 

	cout << shortestDist(graph); 
	return 0; 
} 

#include <iostream> 
#include <vector> 
#include <unordered_map> 
#include <limits> 
using namespace std; 

const int INF = numeric_limits<int>::max(); 

// Function to find the shortest path using multistage graph 
int multistage_shortest_path(vector<pair<int, 
							unordered_map<int, int>>>& graph, 
							int source, int target, int k) { 
	// Initialize the shortest path distances 
	vector<int> d(graph.size(), INF); 
	d[target] = 0; 

	// Loop over each stage from k-1 to 1 
	for (int i = k - 1; i > 0; i--) { 
		// Loop over all vertices in the current stage 
		for (int v = 0; v < graph.size(); v++) { 
			// Skip vertices not in the current stage 
			if (graph[v].first != i) { 
				continue; 
			} 

			// Update the shortest path distance of the current vertex 
			for (const auto& u : graph[v].second) { 
				d[v] = min(d[v], u.second + d[u.first]); 
			} 
		} 
	} 

	// Return the shortest path distance from source to target 
	return d; 
} 

int main() { 
	// Example graph 
	vector<pair<int, unordered_map<int, int>>> graph = { 
		{0, {}}, 
		{1, {{3, 2}, {4, 9}}}, 
		{1, {{3, 6}, {4, 3}}}, 
		{2, {{4, 1}}}, 
		{2, {{5, 4}}}, 
		{3, {{5, 7}}}, 
		{3, {{6, 2}}}, 
		{4, {{5, 1}, {6, 5}}}, 
		{4, {{6, 6}}}, 
		{5, {}}, 
		{5, {}}, 
		{6, {}}, 
		{6, {}} 
	}; 

	// Find the shortest path from vertex 0 to vertex 12 
	int shortest_path_distance = multistage_shortest_path(graph, 0, 12, 7); 
	cout << "Shortest path distance from vertex 0 to vertex 12: " << 
	shortest_path_distance << endl; 

	return 0; 
} 


######################################################################

// C++ program using memoization
#include <bits/stdc++.h>
using namespace std;
int dp[100][100];

// Function for matrix chain multiplication
int matrixChainMemoised(int* p, int i, int j)
{
	if (i == j) 
	{
		return 0;
	}
	if (dp[i][j] != -1) 
	{
		return dp[i][j];
	}
	dp[i][j] = INT_MAX;
	for (int k = i; k < j; k++) 
	{
		dp[i][j] = min(
			dp[i][j], matrixChainMemoised(p, i, k)
					+ matrixChainMemoised(p, k + 1, j)
					+ p[i - 1] * p[k] * p[j]);
	}
	return dp[i][j];
}
int MatrixChainOrder(int* p, int n)
{
	int i = 1, j = n - 1;
	return matrixChainMemoised(p, i, j);
}

// Driver Code
int main()
{
	int arr[] = { 1, 2, 3, 4 };
	int n = sizeof(arr) / sizeof(arr[0]);
	memset(dp, -1, sizeof dp);

	cout << "Minimum number of multiplications is "
		<< MatrixChainOrder(arr, n);
}

###############################################################
#include <iostream>

using namespace std;

// there are four nodes in example graph (graph is 1-based)
const int n = 4;
// give appropriate maximum to avoid overflow
const int MAX = 1000000;

// dist[i][j] represents shortest distance to go from i to j
// this matrix can be calculated for any given graph using
// all-pair shortest path algorithms
int dist[n + 1][n + 1] = {
	{ 0, 0, 0, 0, 0 }, { 0, 0, 10, 15, 20 },
	{ 0, 10, 0, 25, 25 }, { 0, 15, 25, 0, 30 },
	{ 0, 20, 25, 30, 0 },
};

// memoization for top down recursion
int memo[n + 1][1 << (n + 1)];

int fun(int i, int mask)
{
	// base case
	// if only ith bit and 1st bit is set in our mask,
	// it implies we have visited all other nodes already
	if (mask == ((1 << i) | 3))
		return dist[1][i];
	// memoization
	if (memo[i][mask] != 0)
		return memo[i][mask];

	int res = MAX; // result of this sub-problem

	// we have to travel all nodes j in mask and end the
	// path at ith node so for every node j in mask,
	// recursively calculate cost of travelling all nodes in
	// mask except i and then travel back from node j to
	// node i taking the shortest path take the minimum of
	// all possible j nodes

	for (int j = 1; j <= n; j++)
		if ((mask & (1 << j)) && j != i && j != 1)
			res = std::min(res, fun(j, mask & (~(1 << i)))
									+ dist[j][i]);
	return memo[i][mask] = res;
}
// Driver program to test above logic
int main()
{
	int ans = MAX;
	for (int i = 1; i <= n; i++)
		// try to go from node 1 visiting all nodes in
		// between to i then return from i taking the
		// shortest route to 1
		ans = std::min(ans, fun(i, (1 << (n + 1)) - 1)
								+ dist[i][1]);

	printf("The cost of most efficient tour = %d", ans);

	return 0;
}


########################################################3

// C++ program to solve N Queen Problem using backtracking

#include <bits/stdc++.h>
#define N 4
using namespace std;

// A utility function to print solution
void printSolution(int board[N][N])
{
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++)
		if(board[i][j])
			cout << "Q ";
		else cout<<". ";
		printf("\n");
	}
}

// A utility function to check if a queen can
// be placed on board[row][col]. Note that this
// function is called when "col" queens are
// already placed in columns from 0 to col -1.
// So we need to check only left side for
// attacking queens
bool isSafe(int board[N][N], int row, int col)
{
	int i, j;

	// Check this row on left side
	for (i = 0; i < col; i++)
		if (board[row][i])
			return false;

	// Check upper diagonal on left side
	for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
		if (board[i][j])
			return false;

	// Check lower diagonal on left side
	for (i = row, j = col; j >= 0 && i < N; i++, j--)
		if (board[i][j])
			return false;

	return true;
}

// A recursive utility function to solve N
// Queen problem
bool solveNQUtil(int board[N][N], int col)
{
	// base case: If all queens are placed
	// then return true
	if (col >= N)
		return true;

	// Consider this column and try placing
	// this queen in all rows one by one
	for (int i = 0; i < N; i++) {
		
		// Check if the queen can be placed on
		// board[i][col]
		if (isSafe(board, i, col)) {
			
			// Place this queen in board[i][col]
			board[i][col] = 1;

			// recur to place rest of the queens
			if (solveNQUtil(board, col + 1))
				return true;

			// If placing queen in board[i][col]
			// doesn't lead to a solution, then
			// remove queen from board[i][col]
			board[i][col] = 0; // BACKTRACK
		}
	}

	// If the queen cannot be placed in any row in
	// this column col then return false
	return false;
}

// This function solves the N Queen problem using
// Backtracking. It mainly uses solveNQUtil() to
// solve the problem. It returns false if queens
// cannot be placed, otherwise, return true and
// prints placement of queens in the form of 1s.
// Please note that there may be more than one
// solutions, this function prints one of the
// feasible solutions.
bool solveNQ()
{
	int board[N][N] = { { 0, 0, 0, 0 },
						{ 0, 0, 0, 0 },
						{ 0, 0, 0, 0 },
						{ 0, 0, 0, 0 } };

	if (solveNQUtil(board, 0) == false) {
		cout << "Solution does not exist";
		return false;
	}

	printSolution(board);
	return true;
}

// Driver program to test above function
int main()
{
	solveNQ();
	return 0;
}

// This code is contributed by Aditya Kumar (adityakumar129)




#include <bits/stdc++.h>

using namespace std;
class Solution {

    void addSolution(vector<vector<string>> & ans,vector<vector<string>> & board,int n){
        vector<string> temp;
        for(int i = 0;i<n;i++){
            string s = "";
            for(int j = 0;j<n;j++){
                s += board[i][j];
            }
            temp.push_back(s);
        }
        ans.push_back(temp);
        
    }
    bool isSafe(int row,int col,vector<vector<string>> & board,int n){
        //safe means not in same row column and diagonal of prev queen or current queen ke liye sab dirn check kar lo uske path mai koi queen aay gayi to reject

        int x = row;
        int y = col;

        //check for same row only to left as right is not filled
        while(y>=0){//O(n) here use mapping when ever place Q map it with index col so O(1) map <col,true>
            if(board[x][y] == "Q"){
                return false;
            }
            y--;
        }

        //each colum only one Q place no need to check

        //check diagnol all four dirn
        x = row;
        y = col;

        while(x>=0 && y >= 0){//upper left
            if(board[x][y] == "Q"){//for diagnol mapping is diffrent see map<n-1 + col - row,true> by this upper diagnols will gave same value 
                return false;
            }
            x--;
            y--;
        }

        x = row;
        y = col;

        while(x<n && y >= 0){//lower left
            if(board[x][y] == "Q"){//for diagnol mapping is diffrent see sum of row and col is same for this so map<row+col,true>
                return false;
            }
            x++;
            y--;
        }
        
        //no need to check right side as not filled yet

        return true;
    }
    
    void solve(int col,vector<vector<string>> & ans,vector<vector<string>> & board,int n){
        if(col == n){//if all column aare filled with 1 queen in each and still safe then save
            addSolution(ans,board,n);
            return; 
        }

        //for 1 colum have to place queen in each row one by one for all cases
        for(int row = 0;row<n;row++){
            if(isSafe(row,col,board,n)){
                board[row][col] = "Q";
                solve(col+1,ans,board,n);
                //backtrack
                board[row][col] = ".";
            }
        }
    }
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> board(n,vector<string>(n,"."));

        vector<vector<string>> ans;
        solve(0,ans,board,n);

        return ans;
    }
};
int main(){
    
    return 0;
}