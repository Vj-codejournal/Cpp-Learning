#include <iostream>
#include <string>
#include <algorithm>

using namespace std;

string long_integer_multiplication(string num1, string num2) {
    int len1 = num1.size();
    int len2 = num2.size();
    int len_result = len1 + len2;
    int result[len_result] = {0};

    for (int i = len1 - 1; i >= 0; i--) {
        for (int j = len2 - 1; j >= 0; j--) {
            int mul = (num1[i] - '0') * (num2[j] - '0');
            int sum = mul + result[i + j + 1];
            result[i + j] += sum / 10;
            result[i + j + 1] = sum % 10;
        }
    }

    string result_str = "";
    for (int digit : result) {
        if (!(result_str.empty() && digit == 0)) { // Skip leading zeros
            result_str += to_string(digit);
        }
    }
    
    return result_str.empty() ? "0" : result_str;
}

int main() {
    string num1, num2;
    cout << "Enter the first number: ";
    cin >> num1;
    cout << "Enter the second number: ";
    cin >> num2;

    string result = long_integer_multiplication(num1, num2);
    cout << "Result: " << result << endl;

    return 0;
}

// long integer multiplication using divide and conquer
#include <iostream>
#include <cmath>
using namespace std;

// Function to multiply two integers using divide and conquer
long long multiply(long long x, long long y)
{
    // Base case
    if (x < 10 || y < 10)
    {
        return x * y;
    }

    // Determine the length of the longest number
    long long n = max(log10(x) + 1, log10(y) + 1);

    // Split the numbers into two halves
    long long n2 = n / 2;
    long long high1 = x / pow(10, n2);
    long long low1 = x % (long long)pow(10, n2);
    long long high2 = y / pow(10, n2);
    long long low2 = y % (long long)pow(10, n2);

    // Recursively calculate the products of the sub-problems
    long long z0 = multiply(low1, low2);
    long long z1 = multiply((low1 + high1), (low2 + high2));
    long long z2 = multiply(high1, high2);

    // Combine the results
    return (z2 * pow(10, 2 * n2)) + ((z1 - z2 - z0) * pow(10, n2)) + z0;
}

int main()
{
    long long x = 123456789;
    long long y = 987654321;
    long long result = multiply(x, y);
    cout << "Result: " << result << endl;
    return 0;
}

#######################################3
#include <iostream>
#include <vector>
using namespace std;
vector<vector<int>> matrixAdd(const vector<vector<int>>& arr1, const vector<vector<int>>& arr2) {
    int n = arr1.size();
    vector<vector<int>> res(n, vector<int>(n, 0));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            res[i][j] = arr1[i][j] + arr2[i][j];
        }
    }
    return res;
}
vector<vector<int>> matrixSub(const vector<vector<int>>& arr1, const vector<vector<int>>& arr2) {
    int n = arr1.size();
    vector<vector<int>> res(n, vector<int>(n, 0));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            res[i][j] = arr1[i][j] - arr2[i][j];
        }
    }
    return res;
}
vector<vector<int>> matrixMul(const vector<vector<int>>& arr1, const vector<vector<int>>& arr2) {
    int n = arr1.size();
    vector<vector<int>> res(n, vector<int>(n, 0));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            for (int k = 0; k < n; ++k) {
                res[i][j] += arr1[i][k] * arr2[k][j];
            }
        }
    }
    return res;
}

vector<vector<int>> strassenMultiply(const vector<vector<int>>& arr1, const vector<vector<int>>& arr2) {
    int n = arr1.size();
    if (n == 1) {
        vector<vector<int>> res(1, vector<int>(1, 0));
        res[0][0] = arr1[0][0] * arr2[0][0];
        return res;
    }
    int size = n / 2;
    vector<vector<int>> A11(size, vector<int>(size));
    vector<vector<int>> A12(size, vector<int>(size));
    vector<vector<int>> A21(size, vector<int>(size));
    vector<vector<int>> A22(size, vector<int>(size));
    vector<vector<int>> B11(size, vector<int>(size));
    vector<vector<int>> B12(size, vector<int>(size));
    vector<vector<int>> B21(size, vector<int>(size));
    vector<vector<int>> B22(size, vector<int>(size));
    for (int i = 0; i < size; ++i) {
        for (int j = 0; j < size; ++j) {
            A11[i][j] = arr1[i][j];
            A12[i][j] = arr1[i][j + size];
            A21[i][j] = arr1[i + size][j];
            A22[i][j] = arr1[i+ size][j + size];
            B11[i][j] = arr2[i][j];
            B12[i][j] = arr2[i][j + size];
            B21[i][j] = arr2[i + size][j];
            B22[i][j] = arr2[i + size][j + size];
        }
    }
    vector<vector<int>> P = strassenMultiply(matrixAdd(A11, A22), matrixAdd(B11, B22));
    vector<vector<int>> Q = strassenMultiply(matrixAdd(A21, A22), B11);
    vector<vector<int>> R = strassenMultiply(A11, matrixSub(B12, B22));
    vector<vector<int>> S = strassenMultiply(A22, matrixSub(B21, B11));
    vector<vector<int>> T = strassenMultiply(matrixAdd(A11, A12), B22);
    vector<vector<int>> U = strassenMultiply(matrixSub(A21, A11), matrixAdd(B11, B12));
    vector<vector<int>> V = strassenMultiply(matrixSub(A12, A22), matrixAdd(B21, B22));
    vector<vector<int>> C11 = matrixAdd(matrixSub(matrixAdd(P, S), T), V);
    vector<vector<int>> C12 = matrixAdd(R, T);
    vector<vector<int>> C21 = matrixAdd(Q, S);
    vector<vector<int>> C22 = matrixAdd(matrixSub(matrixAdd(P, R), Q), U);
    vector<vector<int>> res(n, vector<int>(n, 0));
    for (int i = 0; i < size; ++i) {
        for (int j = 0; j < size; ++j) {
            res[i][j] = C11[i][j];
            res[i][j + size] = C12[i][j];
            res[i + size][j] = C21[i][j];
            res[i + size][j + size] = C22[i][j];
        }
    }

    return res;
}
void printMatrix(const vector<vector<int>>& matrix) {
    for (const auto& row : matrix) {
        for (int val : row) {
            cout << val << " ";
        }
        cout << endl;
    }
}
int main() {
    int n = 3;
    vector<vector<int> > arr1(n, vector<int>(n));
    vector<vector<int> > arr2(n, vector<int>(n));

    cout << "Enter the elements of matrix 1:" << endl;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            cin >> arr1[i][j];
        }
    }

    cout << "Enter the elements of matrix 2:" << endl;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            cin >> arr2[i][j];
        }
    }
    vector<vector<int> > res = matrixMul(arr1, arr2);
    cout << "Resultant matrix:" << endl;
    printMatrix(res);

    return 0;
}

###################################################
#include<bits/stdc++.h>
using namespace std;

int sum(vector<int> v, int s, int e){
    int p=0;
    for(int i=s; i<=e; i++){
        p+=v[i];
    }
    return p;
}

int defectiveCoin( vector<int> v ){
    float w;
    int i= v[0], j=v[1], k=v[2];
    if(i==j){
        w=v[0];
    }
    else if(i==k){ 
        w=v[0];
    }
    else{
        w=j;
    }
    int s=0, e= v.size()-1;
    float y=sum(v,s,e);
    float sm= y/(e+1);
    if(sm==w){
        cout<<"No defect!!\n";
        return -1;
    }
     
    while(s!=e){
        int m= s+ (e-s)/2;
        float s1, s2;
        s1= sum(v,s,m)/(m-s+1);
        s2= sum(v, m+1, e)/(e-m);

        if(s1==w){
            s=m+1;
            continue;
        }

        else{
            e=m;
            continue;
        }

    }
    if(v[s]<w){
        cout<<"Coin is lighter...\n";
    }
    else{
        cout<<"Coin is heavier...\n";
    }

    return s;
}

int main(){
    vector<int> v= {4,4,4,4,8,4};
    cout<<"index= "<<defectiveCoin(v);
}



#include<bits/stdc++.h>

using namespace std;

class Solution
{
    public:
    int spanningTree(int V,vector<vector<int>> adj[]){
        priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>> pq;
        vector<int> vis(V,0);
        //need MST so store the parent
        pq.push({0,{0,-1}});//wt,node,parent
        int sum = 0;
        vector<pair<int,int>> MST;
        //E all edges go through worst
        while(!pq.empty()){
            auto it = pq.top();//log E for pq to  maintain min heap if 0 connect to all all come in pq so E
            pq.pop();
            pair<int,int> p = it.second;
            int node = p.first;
            int wt = it.first;

            if(vis[node])continue;//already part of mst not go agan or form loop
            sum += wt;//as initial wt already 0 not matter

            if(p.second != -1){//as initial node parent -1 cant include that
                MST.push_back(p);

            }
            //check adj nodes
            //worst E logE move through all edge an pq.push min heap logE
            for(auto it2:adj[node]){
                int adjNode = it2[0];
                int edW = it2[1];
                if(!vis[adjNode]){//adjcent node should not be visited then only add to queue
                    pq.push({edW,{adjNode,node}});
                }
            }
            
        }
        //O(ElogE + ElogE) while and pq.top run together and for is different
        return sum;
    }
};

################################################3

#include<bits/stdc++.h>

using namespace std;
class DisJointSet{
    vector<int> rank,parent,size;
    public:
    DisJointSet(int n){
        rank.resize(n+1,0);//as 1 based indexing graph
        size.resize(n+1);//as 1 based indexing graph
        parent.resize(n+1);
        for(int i = 0;i<=n;i++){
            parent[i] = i;
            size[i] = 1;
        }
        
    }
    int findUpar(int node){
        if(node == parent[node]){
            return node;
        }//and assign all in between to ultimate parent by backtracking
        return parent[node] = findUpar(parent[node]);//store this value as in future if some one asl again so path compression now O(1)    
    }

    void unionByRank(int u,int v){
        int ulp_u = findUpar(u);
        int ulp_v = findUpar(v);
        if(ulp_u == ulp_v){
            return;
        }//as belong to same component so no union
        if(rank[ulp_u] < rank[ulp_v]){
            parent[ulp_u] = ulp_v;
        }//smaller attach to larger no change in rank as it already has more height nothing happen if a small set attach to attached
        else if(rank[ulp_v] < rank[ulp_u]){
            parent[ulp_v] = ulp_u;
        }
        else{
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }

    void unionBySize(int u,int v){
        int ulp_u = findUpar(u);
        int ulp_v = findUpar(v);
        if(ulp_u == ulp_v){
            return;
        }

        if(size[ulp_u] < size[ulp_v]){
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
       
        else{
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }

    }

    
};
class Solution
{
    public:
    int spanningTree(int V,vector<vector<int>> adj[]){//adj list is in form index is the node at each index stored in form adjnode,weight
        vector<pair<int,pair<int,int>>> edges;//as bidirectional
        //O(V+E) V is vertices 
        for(int i = 0;i<V;i++){
            for(auto it: adj[i]){
                int adjNode = it[0];
                int wt = it[1];
                int node = i;

                edges.push_back({wt,{node,adjNode}});//no need to add the opposite edge of it discard automatically in disjoint set

            }
        }
        DisJointSet ds(V);

        sort(edges.begin(),edges.end());//O(MlogM)  M is edges
        int mstWt = 0;
        //M x 4 x alpha * 2
        for(auto it:edges){
            int wt = it.first;
            int u = it.second.first;
            int v = it.second.second;

            if(ds.findUpar(u) != ds.findUpar(v)){//disjoint sets so union
                mstWt += wt;
                ds.unionBySize(u,v);
            }
        }
        return mstWt;
    }
};
int main(){
    return 0;
}
//SC - O(M) for parent and size vector


// C++ program to find minimum
// number of denominations
#include <bits/stdc++.h>
using namespace std;

// All denominations of Indian Currency
int denomination[]
	= { 1, 2, 5, 10, 20, 50, 100, 500, 1000 };
int n = sizeof(denomination) / sizeof(denomination[0]);

void findMin(int V)
{
	sort(denomination, denomination + n);

	// Initialize result
	vector<int> ans;

	// Traverse through all denomination
	for (int i = n - 1; i >= 0; i--) {

		// Find denominations
		while (V >= denomination[i]) {
			V -= denomination[i];
			ans.push_back(denomination[i]);
		}
	}

	// Print result
	for (int i = 0; i < ans.size(); i++)
		cout << ans[i] << " ";
}

// Driver Code
int main()
{
	int n = 93;
	cout << "Following is minimal"
		<< " number of change for " << n << ": ";

	// Function Call
	findMin(n);
	return 0;
}

##############################################3

#include <bits/stdc++.h>
using namespace std;

// All denominations of Indian Currency
int denomination[] = {1, 2, 5, 10, 20, 50, 100, 500, 1000};
int numCoins[] = {5, 5, 5, 5, 5, 5, 5, 5, 5}; // Limited supply of coins
int n = sizeof(denomination) / sizeof(denomination[0]);

void findMin(int V) {
    sort(denomination, denomination + n);

    // Initialize result
    vector<int> ans;

    // Traverse through all denominations
    for (int i = n - 1; i >= 0; i--) {

        // Find denominations
        while (V >= denomination[i] && numCoins[i] > 0) {
            V -= denomination[i];
            ans.push_back(denomination[i]);
            numCoins[i]--;
        }
    }

    // Check if exact change is possible or not
    if (V == 0) {
        cout << "Following is the minimal number of change for " << V << ": ";
        for (int i = 0; i < ans.size(); i++)
            cout << ans[i] << " ";
    } else {
        cout << "Exact change not possible for " << V << " with the given coin supply.";
    }
}

// Driver Code
int main() {
    int n = 93;
    cout << "Following is the minimal number of change for " << n << ": ";

    // Function Call
    findMin(n);
    return 0;
}

##############################################333

#include <bits/stdc++.h>

using namespace std;
class Solution
{
	public:
	//Function to find the shortest distance of all the vertices
    //from the source vertex S.
    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;//for min heap
        vector<int> dist(V);
        for(int i = 0;i<V;i++)dist[i] = 1e9;

        dist[S] = 0;
        pq.push({0,S});

        while(!pq.empty()){
            int dis = pq.top().first;
            int node = pq.top().second;
            pq.pop();
            for(auto it:adj[node]){
                int edgeWeight = it[1];
                int adjNode = it[0];
                if(dis + edgeWeight < dist[adjNode]){
                    dist[adjNode] = dis + edgeWeight;
                    pq.push({dist[adjNode],adjNode});
                }
            }
        }
        return dist;

    }
};
int main(){
    
    return 0;
}

